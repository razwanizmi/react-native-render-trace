{"version":3,"sources":["../src/RenderTrace.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport ReactNative from 'react-native';\n\nconst OriginalView = ReactNative.View;\nconst OriginalImage = ReactNative.Image;\nconst OriginalTouchableOpacity = ReactNative.TouchableOpacity;\n\nconst getMockContainer = (OriginalComponent: React.ComponentType) => {\n  const FunctionalContainer = ({\n    children,\n    ...props\n  }: React.PropsWithChildren<any>) => {\n    return (\n      <OriginalComponent {...props}>\n        <HighlightComponent />\n        {children}\n      </OriginalComponent>\n    );\n  };\n  FunctionalContainer.displayName = 'View';\n\n  return FunctionalContainer;\n};\n\nconst ViewMock = (props: any) => {\n  return (\n    <OriginalView {...props}>\n      <HighlightComponent />\n      {props.children}\n    </OriginalView>\n  );\n};\nViewMock.displayName = 'View';\n\nconst ImageMock = (props: any) => {\n  return (\n    <OriginalView style={{position: 'relative'}}>\n      <OriginalImage {...props} />\n      <HighlightComponent />\n    </OriginalView>\n  );\n};\nImageMock.displayName = 'View';\n\nconst HighlightComponent = () => {\n  const [, setForceUpdate] = useState({});\n  const renderCountRef = useRef(0);\n  const flagRef = useRef(true);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const getColor = () => {\n    const count = renderCountRef.current;\n    if (count === 0) return 'transparent';\n    if (count === 1) return '#2ecc71'; // green\n    if (count === 2) return '#f1c40f'; // yellow\n    if (count === 3) return '#f39c12'; // orange\n    return '#e74c3c'; // red\n  };\n\n  useEffect(() => {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = setTimeout(() => {\n      if (renderCountRef.current > 0) {\n        renderCountRef.current = 0;\n        flagRef.current = false;\n        setForceUpdate({});\n        flagRef.current = true;\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  });\n\n  if (flagRef.current) {\n    renderCountRef.current++;\n  }\n\n  const colorLayerStyle = {\n    borderWidth: 3,\n    borderColor: getColor(),\n    position: 'absolute' as const,\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  };\n\n  return <OriginalView style={colorLayerStyle} pointerEvents=\"box-none\" />;\n};\n\nexport function init() {\n  Object.defineProperty(ReactNative, 'View', {\n    value: getMockContainer(OriginalView),\n  });\n\n  Object.defineProperty(ReactNative, 'TouchableOpacity', {\n    value: getMockContainer(OriginalTouchableOpacity),\n  });\n}\n"],"mappings":";AAAA,OAAO,SAAQ,WAAW,QAAQ,gBAAe;AACjD,OAAO,iBAAiB;AAExB,IAAM,eAAe,YAAY;AACjC,IAAM,gBAAgB,YAAY;AAClC,IAAM,2BAA2B,YAAY;AAE7C,IAAM,mBAAmB,CAAC,sBAA2C;AACnE,QAAM,sBAAsB,CAAC;AAAA,IAC3B;AAAA,IACA,GAAG;AAAA,EACL,MAAoC;AAClC,WACE,oCAAC,qBAAmB,GAAG,SACrB,oCAAC,wBAAmB,GACnB,QACH;AAAA,EAEJ;AACA,sBAAoB,cAAc;AAElC,SAAO;AACT;AAEA,IAAM,WAAW,CAAC,UAAe;AAC/B,SACE,oCAAC,gBAAc,GAAG,SAChB,oCAAC,wBAAmB,GACnB,MAAM,QACT;AAEJ;AACA,SAAS,cAAc;AAEvB,IAAM,YAAY,CAAC,UAAe;AAChC,SACE,oCAAC,gBAAa,OAAO,EAAC,UAAU,WAAU,KACxC,oCAAC,iBAAe,GAAG,OAAO,GAC1B,oCAAC,wBAAmB,CACtB;AAEJ;AACA,UAAU,cAAc;AAExB,IAAM,qBAAqB,MAAM;AAC/B,QAAM,CAAC,EAAE,cAAc,IAAI,SAAS,CAAC,CAAC;AACtC,QAAM,iBAAiB,OAAO,CAAC;AAC/B,QAAM,UAAU,OAAO,IAAI;AAC3B,QAAM,aAAa,OAAuB;AAE1C,QAAM,WAAW,MAAM;AACrB,UAAM,QAAQ,eAAe;AAC7B,QAAI,UAAU,EAAG,QAAO;AACxB,QAAI,UAAU,EAAG,QAAO;AACxB,QAAI,UAAU,EAAG,QAAO;AACxB,QAAI,UAAU,EAAG,QAAO;AACxB,WAAO;AAAA,EACT;AAEA,YAAU,MAAM;AACd,iBAAa,WAAW,OAAO;AAC/B,eAAW,UAAU,WAAW,MAAM;AACpC,UAAI,eAAe,UAAU,GAAG;AAC9B,uBAAe,UAAU;AACzB,gBAAQ,UAAU;AAClB,uBAAe,CAAC,CAAC;AACjB,gBAAQ,UAAU;AAAA,MACpB;AAAA,IACF,GAAG,GAAG;AAEN,WAAO,MAAM;AACX,mBAAa,WAAW,OAAO;AAAA,IACjC;AAAA,EACF,CAAC;AAED,MAAI,QAAQ,SAAS;AACnB,mBAAe;AAAA,EACjB;AAEA,QAAM,kBAAkB;AAAA,IACtB,aAAa;AAAA,IACb,aAAa,SAAS;AAAA,IACtB,UAAU;AAAA,IACV,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,EACT;AAEA,SAAO,oCAAC,gBAAa,OAAO,iBAAiB,eAAc,YAAW;AACxE;AAEO,SAAS,OAAO;AACrB,SAAO,eAAe,aAAa,QAAQ;AAAA,IACzC,OAAO,iBAAiB,YAAY;AAAA,EACtC,CAAC;AAED,SAAO,eAAe,aAAa,oBAAoB;AAAA,IACrD,OAAO,iBAAiB,wBAAwB;AAAA,EAClD,CAAC;AACH;","names":[]}